Module frame_thread
-------------------

Variables
---------
O_CREAT

O_RDONLY

logger

Classes
-------
FrameThread 
    Ancestors (in MRO)
    ------------------
    frame_thread.FrameThread
    threading.Thread
    threading._Verbose
    __builtin__.object

    Instance variables
    ------------------
    clients

    config

    daemon
        A boolean value indicating whether this thread is a daemon thread (True) or not (False).

        This must be set before start() is called, otherwise RuntimeError is
        raised. Its initial value is inherited from the creating thread; the
        main thread is not a daemon thread and therefore all threads created in
        the main thread default to daemon = False.

        The entire Python program exits when no alive non-daemon threads are
        left.

    display_q

    display_q_name

    em_q

    em_q_name

    frames

    ident
        Thread identifier of this thread or None if it has not been started.

        This is a nonzero integer. See the thread.get_ident() function. Thread
        identifiers may be recycled when a thread exits and another thread is
        created. The identifier is available even after the thread has exited.

    name
        A string used for identification purposes only.

        It has no semantics. Multiple threads may be given the same name. The
        initial name is set by the constructor.

    once

    tracks

    Methods
    -------
    __init__(self, config, clients, target=None, group=None)
        Instances a thread to communicate with the transducer translation and tracking modules.

        Parameters
        ----------
        clients: list of class:trunk.webapp.echowebsocket.EchoWebSocket
        target: 'daemon'
        group: none

    getName(self)

    isAlive(self)
        Return whether the thread is alive.

        This method returns True just before the run() method starts until just
        after the run() method terminates. The module function enumerate()
        returns a list of all alive threads.

    isDaemon(self)

    is_alive(self)
        Return whether the thread is alive.

        This method returns True just before the run() method starts until just
        after the run() method terminates. The module function enumerate()
        returns a list of all alive threads.

    join(self, timeout=None)
        Wait until the thread terminates.

        This blocks the calling thread until the thread whose join() method is
        called terminates -- either normally or through an unhandled exception
        or until the optional timeout occurs.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof). As join() always returns None, you must call
        isAlive() after join() to decide whether a timeout happened -- if the
        thread is still alive, the join() call timed out.

        When the timeout argument is not present or None, the operation will
        block until the thread terminates.

        A thread can be join()ed many times.

        join() raises a RuntimeError if an attempt is made to join the current
        thread as that would cause a deadlock. It is also an error to join() a
        thread before it has been started and attempts to do so raises the same
        exception.

    run(self)
        Overrides threading.Thread.run()
        Creates initial connection to expected message queues; echometrics, frames, and tracks.  It polls each one
        waiting for the read-ready flag to be set and consumes the data.  It reformats the data into an object and
        writes it out to clients who are registered.

        Returns
        -------
        None

    setDaemon(self, daemonic)

    setName(self, name)

    signal_handler(self, signal, frame)
        SignalHandler to unlink the MessageQueue created by this thread.

        Parameters
        ----------
        signal: currently will always be signal.SIGINT
        frame: stackframe

    start(self)
        Start the thread's activity.

        It must be called at most once per thread object. It arranges for the
        object's run() method to be invoked in a separate thread of control.

        This method will raise a RuntimeError if called more than once on the
        same thread object.
