"""
This file was generated by bvtidl.pl.
Your changes will most likely be lost.
"""

from ctypes import *
import sys
import sdkerror


class Logger(object):
    """
    The SDK is capable of producing a significant amount of debugging 
    output.  The Logger object exists to allow the user to control 
    (or disable) the output.  Users can also use Logger to add their
    own custom log messages.
    """
    def __setattr__(self, name, value):
        """ Don't allow setting non-existent attributes on this class
        """
        if self._initialized and not hasattr(self, name):
            raise AttributeError("%s instance has no attribute '%s'" % (self.__class__.__name__, name))
        super(Logger, self).__setattr__(name, value)

    @staticmethod
    def set_level(level):
        """
        Set the log threshold level.  Events above level
        will be logged to the target.
        """
        dll.BVTLogger_SetLevel(( c_int(level) ))

    @staticmethod
    def set_target(target):
        """
        The log target can be a filename, "stdout", "stderr", or "null".
        If null is specified, log output is disabled.
        """
        error_code = dll.BVTLogger_SetTarget((target))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @staticmethod
    def write(level, message):
        """
        Write a message to the log.
        """
        dll.BVTLogger_Write(( c_int(level) ), (message))

    LOGLEVEL_NONE = -1
    LOGLEVEL_CRITICAL = 0
    LOGLEVEL_WARNING = 1
    LOGLEVEL_STATUS = 2

if "win32" in sys.platform:
    dll_name = "bvtsdk4.dll"
elif "darwin" in sys.platform:
    dll_name = "libbvtsdk.dylib"
else:
    dll_name = "libbvtsdk.so"
dll = CDLL(dll_name)
dll.BVTLogger_SetLevel.restype = None
dll.BVTLogger_SetLevel.argtypes = (c_int, )
dll.BVTLogger_SetTarget.restype = c_int
dll.BVTLogger_SetTarget.argtypes = (c_char_p, )
dll.BVTLogger_Write.restype = None
dll.BVTLogger_Write.argtypes = (c_int, c_char_p, )

